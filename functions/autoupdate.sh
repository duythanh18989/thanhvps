#!/bin/bash
# ============================================================
# üîÑ MODULE: AUTO UPDATE SCRIPT ThanhTV VPS
# ------------------------------------------------------------
# T√°c gi·∫£: ThanhTV
# Version: v2.0
# M√¥ t·∫£:
#   - T·ª± ƒë·ªông ki·ªÉm tra & c·∫≠p nh·∫≠t b·∫£n m·ªõi t·ª´ GitHub
#   - Backup b·∫£n c≈© tr∆∞·ªõc khi c·∫≠p nh·∫≠t
#   - Ghi log ho·∫°t ƒë·ªông v√†o /var/log/autoupdate.log
# ============================================================

# Set BASE_DIR correctly
if [ -z "$BASE_DIR" ]; then
  BASE_DIR="$(cd "$(dirname "$(dirname "$(realpath "$0")")")" && pwd)"
fi

LOG_FILE="$BASE_DIR/logs/autoupdate.log"
BACKUP_DIR="/opt/backups/script"
VERSION_FILE="$BASE_DIR/version.txt"

# ------------------------------------------------------------
# ‚öôÔ∏è CONFIG GITHUB
# ------------------------------------------------------------
GITHUB_USER="duythanh18989"
GITHUB_REPO="thanhvps"
GITHUB_BRANCH="master"  # or "main"
GITHUB_RAW="https://raw.githubusercontent.com/${GITHUB_USER}/${GITHUB_REPO}/${GITHUB_BRANCH}"
REMOTE_VERSION_URL="${GITHUB_RAW}/version.txt"

# Load utils if available
if [ -f "$BASE_DIR/functions/utils.sh" ]; then
  source "$BASE_DIR/functions/utils.sh"
fi

# ------------------------------------------------------------
# üß† H√ÄM: Ki·ªÉm tra phi√™n b·∫£n hi·ªán t·∫°i
# ------------------------------------------------------------
get_local_version() {
  if [ -f "$VERSION_FILE" ]; then
    cat "$VERSION_FILE" | tr -d '[:space:]'
  else
    echo "0.0.0"
  fi
}

# ------------------------------------------------------------
# üß† H√ÄM: L·∫•y version m·ªõi nh·∫•t t·ª´ GitHub
# ------------------------------------------------------------
get_remote_version() {
  local version=$(curl -fsSL "$REMOTE_VERSION_URL" 2>/dev/null | tr -d '[:space:]')
  if [ -z "$version" ]; then
    echo "0.0.0"
  else
    echo "$version"
  fi
}

# ------------------------------------------------------------
# üî¢ H√ÄM: So s√°nh version (semantic versioning)
# Return: 0 if equal, 1 if v1 < v2, 2 if v1 > v2
# ------------------------------------------------------------
compare_versions() {
  local v1=$1
  local v2=$2
  
  if [ "$v1" = "$v2" ]; then
    return 0
  fi
  
  # Split versions
  local IFS=.
  local i ver1=($v1) ver2=($v2)
  
  # Compare each part
  for ((i=0; i<${#ver1[@]} || i<${#ver2[@]}; i++)); do
    local num1=${ver1[i]:-0}
    local num2=${ver2[i]:-0}
    
    if ((10#$num1 > 10#$num2)); then
      return 2
    elif ((10#$num1 < 10#$num2)); then
      return 1
    fi
  done
  
  return 0
}

# ------------------------------------------------------------
# üíæ H√ÄM: Backup b·∫£n hi·ªán t·∫°i
# ------------------------------------------------------------
backup_current_version() {
  mkdir -p "$BACKUP_DIR"
  local ts=$(date +%Y-%m-%d_%H-%M-%S)
  local tarfile="$BACKUP_DIR/thanhvps_${ts}.tar.gz"
  
  cd "$BASE_DIR"
  tar -czf "$tarfile" \
    --exclude='logs/*' \
    --exclude='.git' \
    --exclude='*.tar.gz' \
    --exclude='*.zip' \
    ./* 2>/dev/null
  
  if [ -f "$tarfile" ]; then
    log_info "‚úÖ Backup: $tarfile"
    echo "$(date '+%Y-%m-%d %H:%M:%S') | BACKUP | $tarfile" >> "$LOG_FILE"
    return 0
  else
    log_warn "‚ö†Ô∏è  Kh√¥ng th·ªÉ t·∫°o backup"
    return 1
  fi
}

# ------------------------------------------------------------
# üöÄ H√ÄM: C·∫≠p nh·∫≠t script t·ª´ GitHub
# ------------------------------------------------------------
update_script() {
  log_info "üîÑ ƒêang t·∫£i b·∫£n c·∫≠p nh·∫≠t t·ª´ GitHub..."
  
  TMP_DIR=$(mktemp -d)
  cd "$TMP_DIR"
  
  # Download entire repo as zip
  local zip_url="https://github.com/${GITHUB_USER}/${GITHUB_REPO}/archive/refs/heads/${GITHUB_BRANCH}.zip"
  
  if wget -q "$zip_url" -O repo.zip; then
    log_info "‚úÖ Downloaded repo.zip"
    
    if unzip -q repo.zip; then
      log_info "‚úÖ Extracted files"
      
      # Copy files to BASE_DIR (skip logs and .git)
      local extracted_dir="${TMP_DIR}/${GITHUB_REPO}-${GITHUB_BRANCH}"
      
      if [ -d "$extracted_dir" ]; then
        # Copy all files except logs and .git
        rsync -av --exclude='logs' --exclude='.git' "${extracted_dir}/" "$BASE_DIR/"
        
        # Make scripts executable
        chmod +x "$BASE_DIR"/*.sh
        chmod +x "$BASE_DIR"/functions/*.sh
        chmod +x "$BASE_DIR"/thanhvps
        
        # Update command
        if [ -f "$BASE_DIR/thanhvps" ]; then
          cp "$BASE_DIR/thanhvps" /usr/local/bin/thanhvps
          chmod +x /usr/local/bin/thanhvps
        fi
        
        log_info "‚úÖ Files updated successfully"
        echo "$(date '+%Y-%m-%d %H:%M:%S') | UPDATE SUCCESS | $REMOTE_VERSION" >> "$LOG_FILE"
        
        # Clean up
        cd "$BASE_DIR"
        rm -rf "$TMP_DIR"
        
        return 0
      else
        log_error "‚ùå Extracted directory not found"
        return 1
      fi
    else
      log_error "‚ùå Failed to extract"
      return 1
    fi
  else
    log_error "‚ùå Failed to download"
    return 1
  fi
}

# ------------------------------------------------------------
# üß© MAIN LOGIC
# ------------------------------------------------------------
main() {
  clear
  echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
  echo "üîÑ ThanhTV VPS Auto Update"
  echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
  
  LOCAL_VERSION=$(get_local_version)
  REMOTE_VERSION=$(get_remote_version)
  
  log_info "üì¶ Phi√™n b·∫£n hi·ªán t·∫°i: $LOCAL_VERSION"
  log_info "üì¶ Phi√™n b·∫£n m·ªõi nh·∫•t: $REMOTE_VERSION"
  echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
  
  # Check if remote version is valid
  if [ "$REMOTE_VERSION" = "0.0.0" ]; then
    log_error "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi GitHub ƒë·ªÉ ki·ªÉm tra version"
    log_info "URL: $REMOTE_VERSION_URL"
    exit 1
  fi
  
  # Compare versions
  compare_versions "$LOCAL_VERSION" "$REMOTE_VERSION"
  result=$?
  
  if [ $result -eq 0 ]; then
    log_info "‚úÖ B·∫°n ƒëang s·ª≠ d·ª•ng phi√™n b·∫£n m·ªõi nh·∫•t!"
    exit 0
  elif [ $result -eq 2 ]; then
    log_warn "‚ö†Ô∏è  Phi√™n b·∫£n local ($LOCAL_VERSION) m·ªõi h∆°n remote ($REMOTE_VERSION)"
    log_info "ƒêang dev version? B·ªè qua update."
    exit 0
  fi
  
  # Need update
  echo ""
  log_warn "‚ö†Ô∏è  C√≥ b·∫£n c·∫≠p nh·∫≠t m·ªõi: $LOCAL_VERSION ‚Üí $REMOTE_VERSION"
  echo ""
  
  if command_exists gum; then
    if gum confirm "B·∫°n c√≥ mu·ªën c·∫≠p nh·∫≠t kh√¥ng?"; then
      DO_UPDATE=true
    else
      DO_UPDATE=false
    fi
  else
    read -p "üëâ B·∫°n c√≥ mu·ªën c·∫≠p nh·∫≠t kh√¥ng? (y/n): " confirm
    if [[ "$confirm" =~ ^[Yy]$ ]]; then
      DO_UPDATE=true
    else
      DO_UPDATE=false
    fi
  fi
  
  if [ "$DO_UPDATE" = true ]; then
    echo ""
    log_info "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    log_info "üöÄ B·∫ÆT ƒê·∫¶U C·∫¨P NH·∫¨T"
    log_info "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    # Backup first
    backup_current_version
    
    # Update
    if update_script; then
      echo ""
      log_info "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
      log_info "üéâ C·∫¨P NH·∫¨T TH√ÄNH C√îNG!"
      log_info "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
      log_info "üì¶ Version m·ªõi: $REMOTE_VERSION"
      log_info "üìù Xem thay ƒë·ªïi: cat CHANGELOG.md"
      echo ""
    else
      echo ""
      log_error "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
      log_error "‚ùå C·∫¨P NH·∫¨T TH·∫§T B·∫†I"
      log_error "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
      log_info "üíæ Backup v·∫´n c√≤n t·∫°i: $BACKUP_DIR"
      echo ""
    fi
  else
    log_info "‚ùå ƒê√£ h·ªßy c·∫≠p nh·∫≠t"
  fi
}

# Run if called directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main
fi

# ------------------------------------------------------------
# üß† H√ÄM: Ki·ªÉm tra phi√™n b·∫£n hi·ªán t·∫°i
# ------------------------------------------------------------
get_local_version() {
  if [ -f "$VERSION_FILE" ]; then
    cat "$VERSION_FILE"
  else
    echo "0.0.0"
  fi
}

# ------------------------------------------------------------
# üß† H√ÄM: L·∫•y version m·ªõi nh·∫•t t·ª´ GitHub
# ------------------------------------------------------------
get_remote_version() {
  curl -fsSL "$REMOTE_VERSION_URL" 2>/dev/null || echo "0.0.0"
}

# ------------------------------------------------------------
# üíæ H√ÄM: Backup b·∫£n hi·ªán t·∫°i
# ------------------------------------------------------------
backup_current_version() {
  mkdir -p "$BACKUP_DIR"
  local ts=$(date +%Y-%m-%d_%H-%M-%S)
  local zipfile="$BACKUP_DIR/ThanhTV_VPS_${ts}.zip"
  cd "$BASE_DIR"
  zip -qr "$zipfile" ./*
  echo "‚úÖ Backup script hi·ªán t·∫°i: $zipfile"
  echo "$(date '+%Y-%m-%d %H:%M:%S') | BACKUP | $zipfile" >> "$LOG_FILE"
}

# ------------------------------------------------------------
# üöÄ H√ÄM: C·∫≠p nh·∫≠t script t·ª´ GitHub
# ------------------------------------------------------------
update_script() {
  echo "üîÑ ƒêang t·∫£i b·∫£n c·∫≠p nh·∫≠t t·ª´ GitHub..."
  TMP_DIR=$(mktemp -d)
  cd "$TMP_DIR"

  # Danh s√°ch file c·∫ßn update
  FILES=("install.sh" "menu.sh" "version.txt")

  # T·∫£i t·ª´ng file
  for f in "${FILES[@]}"; do
    curl -fsSLO "$GITHUB_REPO/$f" && mv "$f" "$BASE_DIR/$f"
  done

  # T·∫£i to√†n b·ªô functions
  mkdir -p "$BASE_DIR/functions"
  curl -fsSL "$GITHUB_REPO/functions.list" -o "$TMP_DIR/functions.list"
  while read -r func; do
    [ -z "$func" ] && continue
    curl -fsSLO "$GITHUB_REPO/functions/$func" && mv "$func" "$BASE_DIR/functions/$func"
  done < "$TMP_DIR/functions.list"

  echo "$(date '+%Y-%m-%d %H:%M:%S') | UPDATE SUCCESS | $REMOTE_VERSION" >> "$LOG_FILE"
  echo "‚úÖ C·∫≠p nh·∫≠t ho√†n t·∫•t! ƒê√£ l√™n version $REMOTE_VERSION"
}

# ------------------------------------------------------------
# üß© MAIN LOGIC
# ------------------------------------------------------------
LOCAL_VERSION=$(get_local_version)
REMOTE_VERSION=$(get_remote_version)

echo "=============================================="
echo "üîÑ ThanhTV VPS Auto Update"
echo "=============================================="
echo "üîπ Phi√™n b·∫£n hi·ªán t·∫°i: $LOCAL_VERSION"
echo "üî∏ Phi√™n b·∫£n m·ªõi nh·∫•t: $REMOTE_VERSION"
echo "=============================================="

if [ "$REMOTE_VERSION" = "$LOCAL_VERSION" ]; then
  echo "‚úÖ B·∫°n ƒëang d√πng b·∫£n m·ªõi nh·∫•t!"
  exit 0
fi

echo "‚ö†Ô∏è  C√≥ b·∫£n c·∫≠p nh·∫≠t m·ªõi ($REMOTE_VERSION > $LOCAL_VERSION)."
read -p "üëâ B·∫°n c√≥ mu·ªën c·∫≠p nh·∫≠t kh√¥ng (y/n)? " confirm
if [[ "$confirm" =~ ^[Yy]$ ]]; then
  backup_current_version
  update_script
else
  echo "‚ùå B·ªè qua c·∫≠p nh·∫≠t."
fi
